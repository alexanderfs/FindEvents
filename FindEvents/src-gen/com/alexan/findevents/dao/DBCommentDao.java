package com.alexan.findevents.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alexan.findevents.dao.DBComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBCOMMENT.
*/
public class DBCommentDao extends AbstractDao<DBComment, Long> {

    public static final String TABLENAME = "DBCOMMENT";

    /**
     * Properties of entity DBComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EventID = new Property(1, Long.class, "eventID", false, "EVENT_ID");
        public final static Property UserID = new Property(2, Long.class, "userID", false, "USER_ID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property TargetUserID = new Property(4, Long.class, "targetUserID", false, "TARGET_USER_ID");
        public final static Property TargetCommentID = new Property(5, Long.class, "targetCommentID", false, "TARGET_COMMENT_ID");
        public final static Property ComentContent = new Property(6, String.class, "comentContent", false, "COMENT_CONTENT");
        public final static Property CommentType = new Property(7, Integer.class, "commentType", false, "COMMENT_TYPE");
        public final static Property VisibleScope = new Property(8, Integer.class, "visibleScope", false, "VISIBLE_SCOPE");
        public final static Property Timestamp = new Property(9, Long.class, "timestamp", false, "TIMESTAMP");
    };


    public DBCommentDao(DaoConfig config) {
        super(config);
    }
    
    public DBCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCOMMENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EVENT_ID' INTEGER," + // 1: eventID
                "'USER_ID' INTEGER," + // 2: userID
                "'USERNAME' TEXT," + // 3: username
                "'TARGET_USER_ID' INTEGER," + // 4: targetUserID
                "'TARGET_COMMENT_ID' INTEGER," + // 5: targetCommentID
                "'COMENT_CONTENT' TEXT," + // 6: comentContent
                "'COMMENT_TYPE' INTEGER," + // 7: commentType
                "'VISIBLE_SCOPE' INTEGER," + // 8: visibleScope
                "'TIMESTAMP' INTEGER);"); // 9: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCOMMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBComment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long eventID = entity.getEventID();
        if (eventID != null) {
            stmt.bindLong(2, eventID);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(3, userID);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        Long targetUserID = entity.getTargetUserID();
        if (targetUserID != null) {
            stmt.bindLong(5, targetUserID);
        }
 
        Long targetCommentID = entity.getTargetCommentID();
        if (targetCommentID != null) {
            stmt.bindLong(6, targetCommentID);
        }
 
        String comentContent = entity.getComentContent();
        if (comentContent != null) {
            stmt.bindString(7, comentContent);
        }
 
        Integer commentType = entity.getCommentType();
        if (commentType != null) {
            stmt.bindLong(8, commentType);
        }
 
        Integer visibleScope = entity.getVisibleScope();
        if (visibleScope != null) {
            stmt.bindLong(9, visibleScope);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(10, timestamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBComment readEntity(Cursor cursor, int offset) {
        DBComment entity = new DBComment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // eventID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // targetUserID
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // targetCommentID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comentContent
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // commentType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // visibleScope
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBComment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTargetUserID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTargetCommentID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setComentContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommentType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVisibleScope(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTimestamp(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBComment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBComment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

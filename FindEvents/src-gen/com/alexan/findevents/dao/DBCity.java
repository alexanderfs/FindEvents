package com.alexan.findevents.dao;

import java.util.List;
import com.alexan.findevents.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBCITY.
 */
public class DBCity {

    private Long id;
    /** Not-null value. */
    private String name;
    private Long timestamp;
    private long province_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBCityDao myDao;

    private DBProvince dBProvince;
    private Long dBProvince__resolvedKey;

    private List<DBDistrict> cityDis;

    public DBCity() {
    }

    public DBCity(Long id) {
        this.id = id;
    }

    public DBCity(Long id, String name, Long timestamp, long province_id) {
        this.id = id;
        this.name = name;
        this.timestamp = timestamp;
        this.province_id = province_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBCityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    public long getProvince_id() {
        return province_id;
    }

    public void setProvince_id(long province_id) {
        this.province_id = province_id;
    }

    /** To-one relationship, resolved on first access. */
    public DBProvince getDBProvince() {
        long __key = this.province_id;
        if (dBProvince__resolvedKey == null || !dBProvince__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBProvinceDao targetDao = daoSession.getDBProvinceDao();
            DBProvince dBProvinceNew = targetDao.load(__key);
            synchronized (this) {
                dBProvince = dBProvinceNew;
            	dBProvince__resolvedKey = __key;
            }
        }
        return dBProvince;
    }

    public void setDBProvince(DBProvince dBProvince) {
        if (dBProvince == null) {
            throw new DaoException("To-one property 'province_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dBProvince = dBProvince;
            province_id = dBProvince.getId();
            dBProvince__resolvedKey = province_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBDistrict> getCityDis() {
        if (cityDis == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBDistrictDao targetDao = daoSession.getDBDistrictDao();
            List<DBDistrict> cityDisNew = targetDao._queryDBCity_CityDis(id);
            synchronized (this) {
                if(cityDis == null) {
                    cityDis = cityDisNew;
                }
            }
        }
        return cityDis;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCityDis() {
        cityDis = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

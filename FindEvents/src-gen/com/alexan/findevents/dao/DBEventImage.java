package com.alexan.findevents.dao;

import com.alexan.findevents.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBEVENT_IMAGE.
 */
public class DBEventImage {

    private Long id;
    private Long eventID;
    private Long imageID;
    private Long timestamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBEventImageDao myDao;

    private DBEventImage dBEventImage;
    private Long dBEventImage__resolvedKey;


    public DBEventImage() {
    }

    public DBEventImage(Long id) {
        this.id = id;
    }

    public DBEventImage(Long id, Long eventID, Long imageID, Long timestamp) {
        this.id = id;
        this.eventID = eventID;
        this.imageID = imageID;
        this.timestamp = timestamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBEventImageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getEventID() {
        return eventID;
    }

    public void setEventID(Long eventID) {
        this.eventID = eventID;
    }

    public Long getImageID() {
        return imageID;
    }

    public void setImageID(Long imageID) {
        this.imageID = imageID;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    /** To-one relationship, resolved on first access. */
    public DBEventImage getDBEventImage() {
        Long __key = this.eventID;
        if (dBEventImage__resolvedKey == null || !dBEventImage__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBEventImageDao targetDao = daoSession.getDBEventImageDao();
            DBEventImage dBEventImageNew = targetDao.load(__key);
            synchronized (this) {
                dBEventImage = dBEventImageNew;
            	dBEventImage__resolvedKey = __key;
            }
        }
        return dBEventImage;
    }

    public void setDBEventImage(DBEventImage dBEventImage) {
        synchronized (this) {
            this.dBEventImage = dBEventImage;
            eventID = dBEventImage == null ? null : dBEventImage.getId();
            dBEventImage__resolvedKey = eventID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

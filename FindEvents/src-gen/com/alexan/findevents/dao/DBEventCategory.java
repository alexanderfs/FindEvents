package com.alexan.findevents.dao;

import com.alexan.findevents.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBEVENT_CATEGORY.
 */
public class DBEventCategory {

    private Long id;
    private Long eventID;
    private Long categoryID;
    private Long timestamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBEventCategoryDao myDao;

    private DBEvent dBEvent;
    private Long dBEvent__resolvedKey;


    public DBEventCategory() {
    }

    public DBEventCategory(Long id) {
        this.id = id;
    }

    public DBEventCategory(Long id, Long eventID, Long categoryID, Long timestamp) {
        this.id = id;
        this.eventID = eventID;
        this.categoryID = categoryID;
        this.timestamp = timestamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBEventCategoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getEventID() {
        return eventID;
    }

    public void setEventID(Long eventID) {
        this.eventID = eventID;
    }

    public Long getCategoryID() {
        return categoryID;
    }

    public void setCategoryID(Long categoryID) {
        this.categoryID = categoryID;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    /** To-one relationship, resolved on first access. */
    public DBEvent getDBEvent() {
        Long __key = this.eventID;
        if (dBEvent__resolvedKey == null || !dBEvent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBEventDao targetDao = daoSession.getDBEventDao();
            DBEvent dBEventNew = targetDao.load(__key);
            synchronized (this) {
                dBEvent = dBEventNew;
            	dBEvent__resolvedKey = __key;
            }
        }
        return dBEvent;
    }

    public void setDBEvent(DBEvent dBEvent) {
        synchronized (this) {
            this.dBEvent = dBEvent;
            eventID = dBEvent == null ? null : dBEvent.getId();
            dBEvent__resolvedKey = eventID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
